function transmittedSignal = datagenTransmitter( ...
    modulation, ...
    rolloffFactor, ...
    filterSpanInSymbols, ...
    samplesPerSymbol, ...
    symbolRate, ...
    messageDuration ...
    )
    requiresFilter = true;
    if modulation == "QPSK"
        bitsPerSymbol = 2;
        modulator = comm.QPSKModulator( ...
          'BitInput',                     true, ...
          'PhaseOffset',                  pi/4, ...
          'OutputDataType',               'double' ...
        );
    elseif modulation == "BPSK"
        bitsPerSymbol = 1;
        modulator = comm.BPSKModulator;
    elseif modulation == "8-PSK"
        bitsPerSymbol = 3;
        modulator = @(x) qammod(bit2int(x, 3), 8);
    elseif modulation == "8-QAM"
        bitsPerSymbol = 3;
        modulator = @(x) pskmod(bit2int(x, 3), 8);
    elseif modulation == "16-QAM"
        bitsPerSymbol = 4;
        modulator = @(x) qammod(bit2int(x, 4), 16);
    elseif modulation == "GMSK"
        bitsPerSymbol = 1;
        modulator = comm.GMSKModulator("SamplesPerSymbol", samplesPerSymbol, ...
            "BitInput", true);
        requiresFilter = false;
   elseif modulation == "2-FSK"
      bitsPerSymbol = 1;
      fdev = floor(symbolRate/4);
      samplesPerSymbol = 8;
      modulator = @(x) fskmod(x, 2, fdev, samplesPerSymbol, symbolRate);
      requiresFilter = false;
    else
        error("Not implemented " + modulation);
    end    
      
     transmittedBin = randi( ...
         [0 1], ...
         bitsPerSymbol * symbolRate * messageDuration/samplesPerSymbol, ...
         1 ...
      );
     
     modulatedData = modulator(transmittedBin);        % Modulates the bits into QPSK symbols           

    if requiresFilter
        transmitterFilter = comm.RaisedCosineTransmitFilter( ...
          'RolloffFactor',                rolloffFactor, ...
          'FilterSpanInSymbols',          filterSpanInSymbols, ...
          'OutputSamplesPerSymbol',       samplesPerSymbol ...
        );
        transmittedSignal = transmitterFilter(modulatedData); % Square root Raised Cosine Transmit Filter
    else
        transmittedSignal = modulatedData;
    end
    

end